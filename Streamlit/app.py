import streamlit as st
import numpy as np
import joblib
import plotly.express as px
import pandas as pd
from io import BytesIO
from fpdf import FPDF
import base64
import os
from datetime import datetime

# Load the model
rf_model = joblib.load('modelo_random_forest.pkl')

st.title("üöó Vehicle CO‚ÇÇ Emission Prediction")
st.markdown("This app uses machine learning to estimate the carbon dioxide emissions generated by vehicular traffic üèôÔ∏è, taking as a reference the **Historic Center of Quito.**" \
" It is based on a set of data created through simulations that consider the urban characteristics of the area and the composition of the vehicle fleet in Ecuador.")
st.markdown("""
‚öôÔ∏è **Customize your scenario**:

- Adjust the **vehicle density** (recommended between **50 and 275 veh/km¬≤**)
- Define the percentage of each vehicle type (**total must equal 100%**)

üìä See how emissions vary based on the parameters you configure.  
‚ö†Ô∏è *Note:* Results are based on simulations, not real-time data.
""")


# Input: Vehicle density
densidad = st.number_input("üö¶ Vehicle density (veh/km¬≤)", min_value=0, value=150, step=10)

# Create 2 columns to distribute the inputs
col1, col2 = st.columns(2)

with col1:
    p_moto = st.number_input("üö≤ % Motorcycles (26.15 - 33.95)", min_value=26.148071, max_value=33.952096, value=29.42, step=0.01)
    p_suv = st.number_input("üöô % SUVs (16.39 - 22.90)", min_value=16.381983, max_value=22.908305, value=19.87, step=0.01)
    p_truck = st.number_input("üöõ % Trucks (1.67 - 7.62)", min_value=1.6703548, max_value=7.6284418, value=4.46, step=0.01)

with col2:
    p_auto = st.number_input("üöó % Automobiles (24.50 - 32.73)", min_value=24.499245, max_value=32.739153, value=28.93, step=0.01)
    p_pickup = st.number_input("üõª % Pickups (14.36 - 20.66)", min_value=14.352723, max_value=20.66669, value=17.32, step=0.01)

# Sum of percentages
suma_total = p_moto + p_auto + p_suv + p_pickup + p_truck
st.markdown(f"**üî¢ Total percentage sum:** {suma_total:.2f}%")

# Validation
if abs(suma_total - 100.0) > 0.001:
    st.error("‚ùå The sum of percentages must be exactly 100%. Please adjust the values.")
else:
    if st.button("Predict emissions"):
        entrada = np.array([[densidad, p_auto, p_moto, p_suv, p_pickup, p_truck]])
        pred = rf_model.predict(entrada)[0]

        labels = ["Total CO‚ÇÇ", "Car", "Motorcycle", "Pickup", "SUV", "Truck"]
        percentages = [p_auto, p_moto, p_pickup, p_suv, p_truck]

        st.success("‚úÖ Prediction completed:")
        for label, value in zip(["üåç Total CO‚ÇÇ", "üöó CO‚ÇÇ Automobile", "üö≤ CO‚ÇÇ Motorcycle", "üõª CO‚ÇÇ Pickup", "üöô CO‚ÇÇ SUV", "üöõ CO‚ÇÇ Truck"], pred):
            st.write(f"**{label}:** {value:.3f} tons")

        # Estimated number of vehicles
        total_vehicles = densidad * 5.53
        approx_vehicles = [total_vehicles * (p / 100) for p in percentages]

        # Prepare data for graph
        data = {
            "Vehicle Type": ["Automobile", "Motorcycle", "Pickup", "SUV", "Truck"],
            "CO‚ÇÇ Emissions": pred[1:],  # skip total
            "Percentage": percentages,
            "Estimated Vehicles": approx_vehicles
        }

        custom_colors = {
            "Automobile": "#636EFA",        # Blue
            "Motorcycle": "#EF553B", # Red
            "Pickup": "#00CC96",     # Green
            "SUV": "#AB63FA",        # Purple
            "Truck": "#FFA15A"       # Orange
        }

        fig = px.bar(
            data,
            x="Vehicle Type",
            y="CO‚ÇÇ Emissions",
            color="Vehicle Type",
            color_discrete_map=custom_colors,
            hover_data={
                "Vehicle Type": True,
                "CO‚ÇÇ Emissions": ":.2f",
                "Percentage": ":.2f",
                "Estimated Vehicles": ":.0f"
            },
            title="üìä Emissions by Vehicle Type"
        )

        st.plotly_chart(fig, use_container_width=True)


        # Donut chart for CO2 percentage per vehicle type
        donut_fig = px.pie(
            data,
            names="Vehicle Type",
            values="CO‚ÇÇ Emissions",
            color="Vehicle Type",
            color_discrete_map=custom_colors,
            hole=0.5,
            title="üîç CO‚ÇÇ Emissions Distribution"
        )

        st.plotly_chart(donut_fig, use_container_width=True)


        ####################################################################

        # Create DataFrame for export
        df_results = pd.DataFrame(data)

        # Convert graph to image
        img_bytes = fig.to_image(format="png")

        # üîò Download CSV button
        csv_data = df_results.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üìÑ Download Results CSV",
            data=csv_data,
            file_name="emission_results.csv",
            mime="text/csv"
        )

        # üîò Download Excel (with chart)
        def generate_excel():
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df_results.to_excel(writer, index=False, sheet_name='Results')
                workbook = writer.book
                worksheet = writer.sheets['Results']
                # Insert image
                image_data = BytesIO(img_bytes)
                worksheet.insert_image('G2', 'chart.png', {'image_data': image_data})

                # Insert donut chart image below
                image_data_donut = BytesIO(donut_fig.to_image(format="png"))
                worksheet.insert_image('G22', 'donut_chart.png', {'image_data': image_data_donut})
            output.seek(0)
            return output

        st.download_button(
            label="üìä Download Results Excel",
            data=generate_excel(),
            file_name="emission_report.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

        # üîò Download PDF button
        def generate_pdf(pred, density, p_auto, p_moto, p_pickup, p_suv, p_truck, fig):
            pdf = FPDF()
            pdf.add_page()
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.set_font("Arial", 'B', 14)
            pdf.cell(0, 10, "Technical Report on Vehicle CO2 Emissions", ln=True, align='C')

            pdf.ln(10)
            pdf.set_font("Arial", size=11)

            description = (
                "This report presents the results of a carbon dioxide emission prediction derived from vehicular traffic "
                "during a one-hour simulation. The prediction was generated using a machine learning model trained with data obtained "
                "from extensive simulations across varying traffic densities ranging from 50 to 275 vehicles per km¬≤. "
                "Quito's Historic Center, which has an area of approximately 5.53 km¬≤ open to vehicular traffic, "
                "was used as a reference map.\n\n"
                "For the distribution of the vehicle fleet, we used data on the number of vehicles registered in each category in Ecuador in 2023. Based on this data, thresholds "
                "were set to vary the proportion of each vehicle type within a defined range, which can be configured through the interface of this application.\n\n"
                f"Based on these parameters, the following results were obtained for a vehicle density of {density} veh/km¬≤ and a fleet distribution "
                "according to the specified percentages:"
            )

            for line in description.split('\n'):
                pdf.multi_cell(0, 7, line)
            pdf.ln(5)

            # Data to display
            vehicle_types = ["Automobile", "Motorcycle", "Pickup", "SUV", "Truck"]
            adjusted_percentages = [p_auto, p_moto, p_pickup, p_suv, p_truck]
            emissions = pred[1:]
            estimated_vehicles = [density * 5.53 * (p / 100) for p in adjusted_percentages]

            # Results table
            pdf.set_font("Arial", 'B', 11)
            pdf.cell(50, 8, "Vehicle Type", border=1)
            pdf.cell(40, 8, "Percentage (%)", border=1)
            pdf.cell(50, 8, "Estimated Vehicles", border=1)
            pdf.cell(40, 8, "CO2 Emitted", border=1)
            pdf.ln()

            pdf.set_font("Arial", size=10)
            for vtype, perc, v_est, emi in zip(vehicle_types, adjusted_percentages, estimated_vehicles, emissions):
                pdf.cell(50, 8, vtype, border=1)
                pdf.cell(40, 8, f"{perc:.2f}", border=1)
                pdf.cell(50, 8, f"{v_est:.0f}", border=1)
                pdf.cell(40, 8, f"{emi:.2f}", border=1)
                pdf.ln()

            # Total CO‚ÇÇ
            pdf.ln(5)
            pdf.set_font("Arial", 'B', 11)
            pdf.cell(0, 10, f"Total Estimated CO2 Emissions: {pred[0]:.2f} tons", ln=True)

            # Date
            pdf.set_font("Arial", size=10)
            pdf.cell(0, 10, f"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True)
            pdf.ln(5)

            # Insert chart
            img_bytes_pdf = fig.to_image(format="png", width=800, height=400, scale=2)
            img_path = "temp_chart.png"
            with open(img_path, "wb") as f:
                f.write(img_bytes_pdf)

            pdf.image(img_path, x=15, w=180)
            os.remove(img_path)

                # Insert donut chart
            img_bytes_donut = donut_fig.to_image(format="png", width=900, height=500, scale=2)
            img_path_donut = "temp_chart_donut.png"
            with open(img_path_donut, "wb") as f:
                f.write(img_bytes_donut)
            pdf.image(img_path_donut, x=15, w=180)
            os.remove(img_path_donut)

            # Convert to BytesIO
            pdf_output = BytesIO()
            pdf_bytes = pdf.output(dest='S').encode('latin1')
            pdf_output.write(pdf_bytes)
            pdf_output.seek(0)

            return pdf_output

        # Example call:
        pdf_file = generate_pdf(pred, densidad, p_auto, p_moto, p_pickup, p_suv, p_truck, fig)

        # For Streamlit:
        st.download_button("üßæ Download Report PDF", data=pdf_file, file_name="CO2_Report.pdf", mime="application/pdf")
